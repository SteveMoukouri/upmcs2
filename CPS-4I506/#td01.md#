# CPS
## TD 1
### Ex1. Communication évènementielle
#### Q1. Interfaces de service
Service considéré: pouvoir recevoir un évènement.
```java
public interface IntEventReceiverService {
    public void onIntEvent(IntEvent event);
}
```

#### Q2. Interfaces de liaison
```java
public interface requireIntEventReceiver {
    public void bindIntEventReceiver(IntEventReceiverService receiver);
}
```
```java
public interface requireActivator {
    public void bindActivator(ActivatorService activator);
}
```
#### Q3. Composant émetteur
cf. feuille
Pas de IntEventSenderService, pas réifié (cf Q2).

#### Q4. Composant récepteur
cf. feuille (diagramme de composant de IntEventReceiverService).
```java
public class Printer implements Component, IntEventReceiverService {
    private BigInteger msg;
    public Printer() {
        this.msg = null;
    }

    public void onIntEvent(IntEvent event){
        if (msg != null)
            throw new ReceptionException();
        else
            msg = event.getValue()
    }

    public void activate() {
        System.out.println(msg?msg:".");
        msg = null;
    }
}
```
#### Q5. Composition
```java
public class Composition {
    public static void main (String[] args) {
        GenConst gen = new GenConst(1);
        Printer printer = new Printer();
        gen.bindIntEventReceiverService(printer);
        // Point (1)
        for (int i = 0; i < 10; i++) {
            gen.activate();
            printer.activate();
        }
    }
}
```
Le programme produit une suite de 10 fois le nombre 1 sur sa sortie standard.

cf. feuille pour le diagramme de composants.

### Ex2. Dataflow
#### Q1. Génération des entiers naturels
cf. Feuille.
Le composant add/mul/div/sub attend d'avoir obtenu 2 évènements.
#### Q2. Composant composite
But: créer un composant *composite* qui envoie des évènements de valeurs successives (1, 2...). Ce composant offre ActivatorService, et requiert in IntEventReceiverService.
```java
public class GenInt implements Component, requireIntEventReceiver {
    private GenConst gen;
    private Add plus;
    public GenInt (BigInteger value) {
        gen = new GenConst(value);
        plus = new Add();
        gen.bind(plus);
        plus.bind(plus);
        plus.onIntEvent(new IntEvent(value - 1));
    }

    public void bindIntEventReceiver (IntEventReceiverService rec) {
        plus.bind(rec);
    }

    public void activate () {
        gen.activate();
        plus.activate();
    }
}
```
Diagramme de composants: cf. feuille.
